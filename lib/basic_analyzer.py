# encoding: utf8

import os, sys, logging
import pefile, ssdeep, hashlib, magic
from pathlib import Path

logger = logging.getLogger(__name__)

def get_hashinfo(data):
	logger.debug("calc secure hash information")
	return [
		{ "type": "md5",    "value" : hashlib.md5(data).hexdigest()   },
		{ "type": "sha1",   "value" : hashlib.sha1(data).hexdigest()  },
		{ "type": "sha256", "value" : hashlib.sha256(data).hexdigest()}
	]

def get_baseinfo(file_name, data):
	logger.debug("parse base file information")
	magicinfo = magic.detect_from_content(data)

	mime_type = magicinfo.mime_type
	fencoding = magicinfo.encoding
	file_type = magicinfo.name
	file_size = Path(file_name).stat().st_size
	return [
		{ "type" : "mime_type", "value" : str(mime_type) },
		{ "type" : "encoding" , "value" : str(fencoding) },
		{ "type" : "file_type", "value" : str(file_type) },
		{ "type" : "file_size", "value" : str(file_size) }
	]

def get_detailinfo(file_name, data):
	pe = pefile.PE(file_name)
	importinfo = []
	if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
		for entry in pe.DIRECTORY_ENTRY_IMPORT:
			dllname = entry.dll
			imports = [ str(each.name) if each.name != None
					else str(ord(str(each.ordinal)))
					for each in entry.imports ]
			importinfo.append({ "dll" : str(dllname), "functions" : imports })

	sections = []
	for section in pe.sections:
		eachresult = [
				{ "type" : "section_name", "value" : str(section.Name) },
				{ "type" : "virtualAddress", "value" : hex(section.VirtualAddress) },
				{ "type" : "misc_virtualSize", "value" : hex(section.Misc_VirtualSize) },
				{ "type" : "SeizeOfRawData", "value" : section.SizeOfRawData },
		]
		sections.append(eachresult)
	fuzzyhash  = ssdeep.hash(data)
	imphash = pe.get_imphash()
	result = {  "sections" : sections,
				"imports"  : importinfo,
				"ssdeep"   : fuzzyhash,
				"imphash"  : imphash }
	return result

def parse_info(file_name):
	results = []
	data = open(file_name, "rb").read()
	baseinfo   = get_baseinfo(file_name, data)
	peinfo     = get_detailinfo(file_name, data)
	hashinfo   = get_hashinfo(data)
	return {"basic"  : baseinfo,
			"detail" : peinfo,
			"hash"   : hashinfo }

