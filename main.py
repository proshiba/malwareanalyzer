# encoding:utf8

import os, sys, glob, json, yaml, shutil
import logging
from logging import config as logconf

CURR_DIR = os.path.dirname( os.path.abspath(__file__) )
CONF_DIR = CURR_DIR+"/config"
SRC_DIR = CURR_DIR+"/src"
RESULT_DIR = CURR_DIR+"/results"
READABLE_TXT_DIR = "readables"

LOG_CONF = CONF_DIR+"/log.conf"
CREDS_CONF = CONF_DIR+"/creds.yaml"

_SLEEP_TIME = 10
logconf.fileConfig(LOG_CONF)
logger = logging.getLogger("malware_analyzer")

import lib.basic_analyzer    as base
import lib.parse_readable    as readable
import lib.malwarebazaar_api as mbapi
import lib.virustotal_api    as vtapi

def write_result(output_dir, baseinfo, mbresult, vtresult):
    base = output_dir + "/basefileinfo.yaml"
    with open(base, "w") as wf:
        yaml.dump(baseinfo, wf, default_flow_style=False)

    if mbresult and mbresult.get("data"):
        mbout = output_dir + "/malwarebazaar.yaml"
        with open(mbout, "w") as wf:
            yaml.dump(mbresult, wf, default_flow_style=False)

    if vtresult and vtresult.get("data"):
        vtout = output_dir + "/virustotal.yaml"
        with open(vtout, "w") as wf:
            yaml.dump(vtresult, wf, default_flow_style=False)

def main():
    logger.info("start analysis")
    creds = None
    if os.path.exists(CREDS_CONF):
        logger.debug("parse credential config")
        with open(CREDS_CONF) as f:
            creds = yaml.safe_load(f)["creds"]

    need_sleep = False
    for each in glob.glob(SRC_DIR+"/*.exe"):
        if need_sleep:
            logger.info("sleep {} sec for virustotal limits.".format(_SLEEP_TIME))
            time.sleep(_SLEEP_TIME*1000)
        else:
            need_sleep=True

        fname = os.path.basename(each)
        logger.info("parse start for {}".format(fname))
        each_dir = "{}/{}".format(RESULT_DIR, fname)
        if not os.path.exists(each_dir):
            os.mkdir(each_dir)
        baseinfo = base.parse_info(each)
        each_readable_dir = "{}/{}".format(each_dir, READABLE_TXT_DIR)
        if not os.path.exists(each_readable_dir):
            os.mkdir(each_readable_dir)
        readable.write_readablestring(each, each_readable_dir)
        sha256  = baseinfo["hash"][2]["value"]
        imphash = baseinfo["detail"]["imphash"]
        mbresult = None
        if creds and creds.get("malwarebazaar"):
            try:
                mbapi.API_KEY=creds["malwarebazaar"]["apikey"]
                res = mbapi.getinfo_by_hash(sha256)
                if res["exist"]:
                    mbresult = { "type" : "hash", "data" : res }
                else:
                    res = mbapi.getinfo_by_imphash(imphash)
                    if res["exist"]:
                        mbresult = { "type" : "imphash", "data" : res }
            except Exception as e:
                logger.error("error occurred by malware bazaar check")
                logger.exception(e)
        vtresult = None
        if creds and creds.get("malwarebazaar"):
            try:
                vtapi.API_KEY=creds["virustotal"]["apikey"]
                res = vtapi.getinfo_by_hash(sha256)
                vtresult = { "type" : "hash", "data" : res }
            except Exception as e:
                logger.error("unknown error occurred by virustotal check")
                logger.exception(e)
        write_result(each_dir, baseinfo, mbresult, vtresult)
        logger.info("parse ended")
    logger.info("end")

if __name__ == '__main__':
    main()

