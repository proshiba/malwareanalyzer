# encoding:utf8

import os, sys, glob, json, yaml, shutil
import logging
from logging import config as logconf

import lib.basic_analyzer    as base
import lib.parse_readable    as readable
import lib.malwarebazaar_api as mbapi
import lib.virustotal_api    as vtapi

CURR_DIR = os.path.dirname( os.path.abspath(__file__) )
CONF_DIR = CURR_DIR+"/config"
SRC_DIR = CURR_DIR+"/src"
RESULT_DIR = CURR_DIR+"/results"

LOG_CONF = CONF_DIR+"/log.conf"
CREDS_CONF = CONF_DIR+"/creds.yaml"

logconf.fileConfig(LOG_CONF)
logger = logging.getLogger("malware_analyzer")

_SLEEP_TIME = 10

def main():
    logger.info("start analysis")
    creds = None
    if os.path.exists(CREDS_CONF):
        logger.debug("parse credential config")
        with open(CREDS_CONF) as f:
            creds = yaml.safe_load(f)

    need_sleep = False
    for each in glob.glob(SRC_DIR+"/*.exe"):
        if need_sleep:
            logger.info("sleep {} sec for virustotal limits.".format(_SLEEP_TIME))
            time.sleep(_SLEEP_TIME*1000)
        else:
            need_sleep=True

        fname = os.path.basename(each)
        logger.info("parse start for {}".format(fname))
        each_dir = "{}/{}".format(RESULT_DIR, fname)
        if not os.path.exists(each_dir):
            os.mkdir(each_dir)
        baseinfo = base.parse_info(each)
        logger.info("parse ended")
    logger.info("end")

if __name__ == '__main__':
    main()

"""
開発に関するメモ書き
res1 = mb.getinfo_by_hash("8de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754")
res2 = mb.getinfo_by_hash("7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754")
res3 = mb.getinfo_by_imphash("45d579faec0eaf279c0841b2233727cf")
res4 = mb.getinfo_by_imphash("45d579faec0eaf279c0841b2233727ca")
 
# 存在しない場合
{'query_status': 'hash_not_found'}

content = open("src/kentai.exe", "rb").read()
fhash=hashlib.sha256(content)
fhash.hexdigest()
'ecf0e7200d400b9e0d002725941d1e47c3e29bf31fa3a136067adb50d849dacc'
"""

